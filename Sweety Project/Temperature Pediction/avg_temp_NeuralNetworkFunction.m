function [Y,Xf,Af] = avg_temp_NeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 31-May-2021 20:21:31.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 1;
x1_step1.gain = 0.0666666666666667;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 13;
x2_step1.gain = 0.0769230769230769;
x2_step1.ymin = -1;

% Layer 1
b1 = [3.9674506055021647732;-0.35176703885849003317;1.1537314390124973063;1.1184896119235843148;-0.80050844647340002602;1.0835624967755397297;0.95267138709504961547;-0.041776808287290093102;-2.4575082592035912832;2.8191102420848275223];
IW1_1 = [-0.63166623677800948222 1.2510722175823363322;0.07688822803183706367 0.073546965312656212288;-0.37888705865864685807 -0.93558156187677821158;-0.4531257988313893148 -1.2324637580374313561;-0.60542266510503306431 -3.7200038884932711269;-0.1620294672447423201 2.5966932086366298904;1.9853487644103133825 1.7228316288953238189;-2.6864711792789366385 -0.067929357917380292498;-1.91781704869759273 -3.7929458263437507703;0.92825710828167695698 0.12408519186299417358];
IW1_2 = [-2.8318253860914737174 -0.37798571215230064579;-1.344596546778550783 -0.45946627640795900671;2.0902038302736238862 3.089525708719424113;-0.25856795595515685848 -1.1020666074952143454;0.77075130806979341713 -1.1980539409072024082;1.6407443900980931417 0.92261625062406982245;-0.15074649886127167164 0.22822747779228846898;1.6882451764405856931 0.037350478300634162854;0.49776305690558825257 -0.08284613850156782866;-1.8772040893185908406 -0.43209361923833206065];

% Layer 2
b2 = -0.53075086106613167392;
LW2_1 = [0.39139839235657458705 -0.62884438529479569358 -0.046359561676610261394 -0.045454420035741106842 0.11036236200830679133 0.042366851585701754968 0.20933038380782448273 0.030115379379625800693 0.087897803093150400633 -0.012557720206381142725];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0769230769230769;
y1_step1.xoffset = 13;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end

function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 28-Jun-2021 12:48:29.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 1;
x1_step1.gain = 0.0666666666666667;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 33;
x2_step1.gain = 0.0298507462686567;
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.025778110769978705707;0.29418676196748749785;-0.024382031069736707918;-0.5092436695861379814;0.098511154737834893957;-0.402654449009297144;0.14991350826406787955;0.025740907631172843528;-0.024032106011947829138;-0.025509699052916608858];
IW1_1 = [0.0024566223324404851819 0.1003146477582619045;0.71683780883659176109 -0.021619896605667311001;0.002995762710072485957 0.097825203848465006051;0.61380239614261589143 0.11846324758971918389;0.31004031446081081747 -0.040812215005196710027;-0.58933944283101979966 -0.50790778658187241135;0.12966884522491736731 -0.2971634074563372363;-0.0024709018793758617989 -0.10024917861825170806;0.003131975080022097839 0.097190615955089904032;0.0025597273479265603147 0.099841177335904779389];
IW1_2 = [-0.068511584652322848887 -0.061829834615441899015;0.40594546150113008931 0.78495276172498118505;-0.066249205265708044355 -0.059219145220682188613;-0.14517278137984127029 -0.89600098782593484703;-0.26982856289084161672 1.5218100391923679027;-1.0656603154755599494 -0.013714088320157885592;1.0399182387150598394 -0.14539240810921211233;0.068451363038055115795 0.061759650853838068962;-0.065681009704199308508 -0.058571591385044648181;-0.068077003291490273407 -0.061324240128166417063];

% Layer 2
b2 = 0.06316619973479986605;
LW2_1 = [-0.14427730480229644661 -1.2616034271827860636 -0.13975527117624717 0.36081968878317516314 0.87530486550597663697 -0.65554565533509701059 0.93060489841423144064 0.14415716882204254734 -0.13861641300801824661 -0.14341013990351383911];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0298507462686567;
y1_step1.xoffset = 33;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
